const enGB = {
    AddNewFloorForm: {
        floorNameExistsError: "Floor with the same name already exists!",
        floorNameLabel: "Floor name *",
    },
    AddNewGuestForm: {
        guestNameInputLabel: "Guest name *",
    },
    AddNewOrganisationForm: {
        maxPropertiesLabel: "Add maximum number of allowed properties...",
        organisationNameError: "Organisation name needs to have at least 3 characters!",
        organisationNameLabel: "Enter organisation name...",
    },
    AddNewPropertyForm: {
        brandImageTooltip:
            "For best results, use a PNG or SVG with transparent background. Maximum dimensions: 300x300px",
        imageProcessingError: "Error processing image. Please try another file.",
        imageUploadPlaceholder: "Click or drag and drop to upload an image",
        imageUrlLabel: "Image URL",
        pasteUrlButtonLabel: "Paste external URL",
        propertyBrandImageLabel: "Property Brand Image",
        propertyNameLabel: "Property name",
        propertyNameLengthValidationMessage: "Property name needs to have at least 3 characters!",
        uploadFileButtonLabel: "Upload File",
    },
    AppDrawer: {
        languages: {
            croatian: "Croatian",
            english: "English",
            german: "German",
            spanish: "Spanish",
        },
        languageSelectorLabel: "Language",
        links: {
            issueReportsOverview: "Issue Reports Overview",
            logout: "Logout",
            manageAnalytics: "Manage Analytics",
            manageDrinkCards: "Manage Drink Cards",
            manageEvents: "Manage Events",
            manageFloors: "Manage Floors",
            manageGuests: "Guestbook",
            manageOrganisations: "Manage Organisations",
            manageProperties: "Manage Properties",
            manageUsers: "Manage Users",
            reportIssue: "Report an Issue",
            settings: "Settings",
        },
        logoutAriaLabel: "Logout",
        toggles: {
            darkMode: "Toggle dark mode",
        },
    },
    AppTopMenu: {
        menuAriaLabel: "Menu",
    },
    DrinkBundleDialog: {
        bundleItemsLabel: "Bundle Items ({count})",
        bundleNameLabel: "Bundle Name",
        bundlePriceLabel: "Bundle Price",
        bundlePriceLowerThanRegularError: "Bundle price should be lower than regular price",
        cancelButtonLabel: "Cancel",
        createBundleButtonLabel: "Create Bundle",
        descriptionOptionalLabel: "Description (Optional)",
        fillRequiredFieldsError: "Please fill in all required fields",
        nameIsRequiredError: "Name is required",
        pleaseSelectDrinkError: "Please select a drink",
        priceGreaterThanZeroError: "Price is required and must be greater than 0",
        qtyLabel: "Qty",
        quantityGreaterThanZeroError: "Quantity must be greater than 0",
        removeItemConfirmMsg: "Are you sure you want to remove this item?",
        savePercentageText: "Save {percentage}%",
        selectDrinkLabel: "Select Drink",
        unknownItemText: "Unknown Item",
    },
    DrinkCardBuilderAddDragElementsDropdown: {
        addBundleLabel: "Add Bundle",
        addHeaderEndLabel: "Add Header End",
        addHeaderLabel: "Add Header",
        createBundleDialogTitle: "Create Bundle",
        editBundleDialogTitle: "Edit Bundle",
    },
    DrinkCardBuilderCustomSectionDialog: {
        nameIsRequiredError: "Name is required",
    },
    DrinkCardBuilderItemSelectionDialog: {
        noItemsFoundText: "No items found",
        searchItemsPlaceholder: "Search items",
    },
    Error404: {
        code: "(404)",
        goBackButtonLabel: "Go back",
        message: "Sorry, nothing here...",
    },
    EventCard: {
        freeLabel: "Free",
    },
    EventCreateForm: {
        entryPriceInputLabel: "Entry price, leave 0 if free",
        eventImgInputLabel: "Optional event image url",
        eventNameInputLabel: "Event name*",
        guestListLimitInputLabel: "Guest list limit",
        inputDateTimeLabel: "Event date and time",
        inputDateTimePickerCloseBtnLabel: "Close",
        noChosenFloorsMessage: "You need to choose at least one floor plan",
    },
    EventCreateReservation: {
        requireReservedBySelectionError: "You need to select at least one option",
        reservationConsumption: "Consumption",
        reservationGuestContact: "Guest contact",
        reservationGuestName: "Guest name *",
        reservationNote: "Note",
        reservationNumberOfGuests: "Guest count *",
        reservationTime: "Time",
        reservationVIP: "VIP?",
        reservedByLabel: "Reserved by",
        reservedBySocialLabel: "Social Networks",
        title: "Table",
    },
    EventGuestList: {
        addGuestLabel: "Add Guest",
        deleteGuestTitle: "Do you really want to remove this guest from the guest list?",
        guestLimitReached: "Limit reached!",
        guestListEmptyMessage: "Guest list is empty",
        title: "Guest List",
    },
    EventGuestListCreateGuestForm: {
        guestNameLabel: "Guest name *",
        guestNameValidationLength: "Name must have at least 3 characters!",
    },
    EventGuestSearch: {
        guestArrivedIconAriaLabel: "Guest arrived checkmark icon",
        hideArrivedLabel: "Hide arrived",
        label: "Search tables by guest name...",
        noResultsText: "No results",
        onFloorConnector: "on",
    },
    EventQueuedReservations: {
        addNewReservation: "Add new reservation",
        emptyMessage: "There are no reservations in the queue.",
        errorMessage: "Error fetching reservations.",
        title: "Queued Reservations",
    },
    EventShowReservation: {
        contactLabel: "Contact",
        createdAtLabel: "Created at",
        createdByLabel: "Creator",
        guestHistoryLabel: "Guest history",
        guestNameLabel: "Name",
        linkTablesLabel: "Link tables",
        moveToQueueLabel: "Move to queue",
        noteLabel: "Note",
        numberOfPeopleLabel: "Number of people",
        pendingLabel: "Pending",
        reservationConfirmedLabel: "Confirmed",
        reservationConsumption: "Consumption",
        reservationGuestArrivedLabel: "Arrived",
        reservedByLabel: "Reserved by",
        timeLabel: "Time of arrival",
        title: "Table",
        unlinkTablesLabel: "Unlink tables",
        waitingForResponse: "Waiting for response",
    },
    FTBottomDialog: {
        closeBottomDialogAriaLabel: "Close bottom dialog",
    },
    FTDialog: {
        closeDialogAriaLabel: "Close dialog",
    },
    FTTimeframeSelector: {
        apply: "Apply",
        applyCustomDateRangeAriaLabel: "Apply custom date range",
        cancel: "Cancel",
        cancelCustomDateRangeAriaLabel: "Cancel custom date range",
        clearCustomDateRangeAriaLabel: "Clear custom date range",
        custom: "Custom",
        customDateRangePickerAriaLabel: "Custom date range picker",
        errorInvalidPreset: "Invalid preset: {preset}",
        errorMaxDays: "Date range cannot exceed {maxDays} days.",
        errorSelectDates: "Please select both start and end dates.",
        errorStartDateCalculation: "Start date calculation failed.",
        invalidPreset: "Invalid preset selection.",
        last7Days: "Last 7 Days",
        last30Days: "Last 30 Days",
        openDatePicker: "Open date picker",
        selectDateRange: "Select Date Range",
        selectTimeframe: "Select Timeframe",
        to: "to",
        today: "Today",
        yesterday: "Yesterday",
    },
    FTTimezoneList: {
        searchTimezonesAriaLabel: "Search timezones",
        searchTimezonesPlaceholder: "Search timezones...",
    },
    Global: {
        actions: "Actions",
        active: "Active",
        arrived: "Arrived",
        cancel: "Cancel",
        cancelled: "Cancelled",
        copy: "Copy",
        delete: "Delete",
        edit: "Edit",
        fillRequiredFields: "Please fill all required fields.",
        inactive: "Inactive",
        manageInventoryLink: "Manage Inventory",
        name: "Name",
        noDescription: "No description",
        reactivate: "Reactivate",
        reset: "Reset",
        submit: "Submit",
        tagsLabel: "Tags",
        transfer: "Transfer",
    },
    GuestSummaryChips: {
        arrived: "Arrived",
        reservations: "Reservations",
    },
    InventoryItemCreateForm: {
        alcoholContentRange: "Alcohol content must be between 0 and 100",
        mainCategoryRequired: "Main category is required",
        quantityNonNegative: "Quantity must be non-negative",
        subCategoryRequired: "Sub category is required",
        volumePositive: "Volume must be positive",
    },
    InventoryTable: {
        mainCategory: "Main Category",
        quantity: "Quantity",
        subCategory: "Sub Category",
        supplier: "Supplier",
        volume: "Volume",
    },
    NetworkOverlay: {
        noInternetConnectionText: "No Internet Connection",
        reloadButtonLabel: "Reload",
        waitOrReloadText: "Wait or try to reload the page",
    },
    PageAdminEvent: {
        arrivedReservationsTabLabel: "Arrived ({count})",
        cancelledReservationsTabLabel: "Cancelled ({count})",
        cannotRemoveFloorWithReservationsError: "Cannot remove floor with active reservations",
        editEventInfoDialogTitle: "Edit event info",
        editingFloorDialogTitle: "Editing Floor: {floorName}",
        editTabLabel: "Edit",
        eventFloorsCardTitle: "Event Floors",
        eventInfoCardTitle: "Event Info",
        guestsTitle: "Guests",
        infoTabLabel: "Info",
        logsTabLabel: "Logs",
        logsTabLabelWithCount: "Logs ({count})",
        noArrivedReservationsMessage: "No arrived reservations",
        noCancelledReservationsMessage: "No cancelled reservations",
        permanentlyDeleteReservationMessage:
            "This will delete the reservation permanently, excluding it from all analytics. This cannot be undone.",
        permanentlyDeleteReservationTitle: "Permanently delete reservation?",
        reservedByStatusTitle: "Reserved by status",
        returningGuestsTabLabel: "Returning ({count})",
        viewButtonLabel: "View",
    },
    PageAdminEvents: {
        createNewEventDialogTitle: "Create new event",
        deleteEventDialogTitle: "Delete Event?",
        editEventDialogTitle: "Editing event: {eventName}",
        eventCreatedNotificationMessage: "Event created!",
        noEventsMessage: "There are no events created.",
        pastEventsLabel: "Past Events",
        title: "Events",
    },
    PageAdminFloors: {
        deleteFloorMessage: "Delete floor?",
        duplicateFloorPlanMessage: "Are you sure you want to duplicate {floorName} floor plan?",
        noFloorPlansMessage: "This property has no floor plans.",
        title: "Floor Plans",
    },
    PageAdminGuest: {
        deleteGuestConfirmMessage: "Are you sure you want to delete guest {name}?",
        deleteGuestConfirmTitle: "Delete guest?",
        editGuestConfirmMsg: "Are you sure you want to edit guest {name}?",
        editGuestDialogTitle: "Editing guest: {name}",
        editVisitTitle: "Edit Visit Details",
        lastModified: "Last modified",
        noVisitsMessage: "There are no visits recorded for this guest.",
        upcomingChipLabel: "Upcoming",
    },
    PageAdminGuests: {
        createNewGuestDialogTitle: "Create new guest",
        noGuestsData: "No guests data.",
        title: "Guests",
    },
    PageAdminInventory: {
        bulkDeleteConfirmMessage: "Are you sure you want to delete {count} items?",
        bulkDeleteSuccess: "Items deleted successfully",
        createNewInventoryItemDialogTitle: "Create new inventory item",
        deleteItemConfirmMessage: "Delete inventory item: {name}?",
        editInventoryItemDialogTitle: "Editing inventory item: {name}",
        importError: "Error importing items. Please check the file format and try again.",
        importMergeSuccess: "Items imported successfully. {count} items added, {updated} updated",
        noItemsMessage: "There are no items in the inventory.",
        title: "Inventory",
    },
    PageAdminIssueReports: {
        deleteConfirmation: "Delete Issue",
        issueDeleted: "Issue has been deleted successfully.",
        noIssuesMessage: "No issues have been reported",
        status: {
            in_progress: "In Progress",
            new: "New",
            resolved: "Resolved",
            wont_fix: "Won't Fix",
        },
        statusUpdated: "Issue status updated",
        title: "Issue Reports",
        updateStatus: "Update Status",
    },
    PageAdminOrganisation: {
        deleteOrganisationButtonAriaLabel: "Delete organisation",
        deleteOrganisationConfirmMessage:
            "This action cannot be undone. All users, properties, and data associated with this organisation will be permanently deleted.",
        deleteOrganisationConfirmTitle: "Delete Organisation?",
        manageButtonLabel: "Manage",
        manageGuestsDescription: "Manage guest access and permissions for this organisation",
        managePropertiesDescription:
            "Add, edit, or remove properties belonging to this organisation",
        manageUsersDescription: "Add, edit, or remove users who can access this organisation",
        organisationDeletedSuccess: "Organisation deleted successfully",
        organisationIdLabel: "Organisation ID:",
        statusLabel: "Status:",
    },
    PageAdminOrganisations: {
        addNewOrganisationTitle: "Add new Organisation",
        adjustSearchCriteria: "Try adjusting your search criteria",
        createOrganisationButton: "Create Organisation",
        noOrganisationsFound: "No organisations found",
        organisationCreatedSuccess: "Organisation created successfully!",
        searchPlaceholder: "Search organisations...",
        title: "Organisations",
    },
    PageAdminProperties: {
        createPropertyDialogTitle: "Add new Property",
        deletePropertyDialogMessage: "This will also delete all the associated events!",
        deletePropertyDialogTitle: "Delete property?",
        editPropertyDialogTitle: "Editing property: {name}",
        maxAmountOfPropertiesReachedMessage:
            "You have reached the maximum amount of created properties!",
        noPropertiesCreatedMessage: "There are no venues created",
        properties: "Properties",
    },
    PageAdminPropertyDrinkCards: {
        addSection: "Add Section",
        amount: "Amount",
        cardCreatedMessage: "Drink card created successfully",
        cardDeletedMessage: "Drink card deleted successfully",
        cardDescriptionLabel: "Description (optional)",
        cardNameLabel: "Card Name",
        cardUpdatedMessage: "Drink card updated successfully",
        createCardDialogTitle: "Create New Drink Card",
        deleteCardConfirmation: "Are you sure you want to delete this drink card?",
        displayName: "Display Name",
        downloadQRCode: "Download QR Code",
        editCardDialogTitle: "Edit Drink Card",
        imageProcessingError: "Error processing image.",
        invalidFileType: "Invalid file type.",
        isActiveLabel: "Active",
        noCardsMessage:
            "No drink cards created yet. Click the + button to create your first drink card.",
        noItemsMessage: "No items in this section. Click + to add items.",
        qrCodeAlt: "Drink Card QR Code",
        qrCodeTitle: "QR Code",
        sectionNameLabel: "Section Name",
        sectionsCount: "Sections: {count}",
        sectionsLabel: "Sections",
        servingSize: "Serving Size",
        servingSizeOptional: "Serving Size (Optional)",
        title: "Digital Drink Cards",
        unit: "Unit",
    },
    PageAdminUsers: {
        cannotDeleteSelfError: "You cannot delete yourself!",
        createNewUserDialogTitle: "Create new user",
        createPropertiesPrompt: "In order to list users, create some properties first",
        deleteUserConfirmTitle: "Delete user?",
        editSelfError: "To edit your profile, go to profile page!",
        editUserConfirmationMessage: "Are you sure you want to edit user {name}?",
        editUserDialogTitle: "Editing user: {name}",
        maxAmountUsersCreationMessage:
            "You have reached the maximum amount of users which is {limit}!",
        noUsersCreatedMessage: "There are no users created.",
        propertyUserCountTabLabel: "{propertyName} ({count})",
        title: "Users",
        unassignedUsersTitle: "Unassigned users ({count})",
        userUpdatedSuccess: "User updated successfully!",
    },
    PageAuth: {
        invalidEmailError: "The email address you entered is invalid.",
        loginButtonLabel: "Login",
        passwordHint: "Enter your password",
        passwordLabel: "Password *",
        passwordMinLengthError:
            "Please enter your password, it has to contain minimum 5 characters.",
        unexpectedError: "An unexpected error occurred. Please try again.",
        usernameHint: "Enter username",
        usernameLabel: "Username *",
        userNotFoundError: "No account found with this email.",
        welcomeMessage: "Welcome to Firetable",
        wrongPasswordError: "Incorrect password. Please try again.",
    },
    PageEvent: {
        deleteQueuedReservationConfirmMsg: "Are you sure you want to delete this reservation?",
        exportReservationsConfirmMsg: "This will export reservations to a CSV file",
    },
    PageIssueReport: {
        categories: {
            bug: "Bug",
            feature_request: "Feature Request",
        },
        categoryLabel: "Issue Category",
        createNewIssue: "Report New Issue",
        deleteConfirmation: "Are you sure you want to delete this issue?",
        descriptionHint: "Please describe the issue in detail",
        descriptionLabel: "Description",
        editIssue: "Edit Issue",
        issueDeleted: "Issue has been deleted successfully",
        issueReportedSuccess: "Issue has been reported successfully",
        issueUpdatedSuccess: "Issue has been updated successfully.",
        myIssues: "My Issues",
        noIssuesMessage: "You haven't reported any issues yet",
        title: "Issue Reports",
        tooManyReports:
            "You can only submit {count} reports every {minutes} minutes. Please try again later.",
    },
    PageOrganisations: {
        addNewOrganisationTitle: "Add new Organisation",
        createOrganisationButton: "Create Organisation",
        floorPlansPerEvent: "Floor Plans/Event",
        noOrganisationsMessage: "Create your first organisation to get started",
        organisationCreatedSuccess: "Organisation created successfully!",
        propertiesLimit: "Properties Limit",
    },
    PageProfile: {
        nameLabel: "Name: {name}",
        passwordInputDisabledTitle: "Enable input",
        passwordInputEnabledTitle: "Disable input",
        passwordInputPlaceholder: "Enter new password",
        roleLabel: "Role: {role}",
        title: "Profile of {name}",
        updatePasswordButtonLabel: "Update Password",
    },
    PieChart: {
        tooltipPercentage: "Percentage",
        tooltipValue: "Value",
    },
    PlannedReservationForm: {
        reservedByStaffRadioBtnLabel: "Staff",
    },
    TelNumberInput: {
        clearButtonLabel: "Clear",
        countryCodeLabel: "Country Code",
        invalidPhoneNumberValidationMsg: "Invalid phone number",
        phoneNumberLabel: "Phone Number",
        provideCountryAndNumberValidationMsg: "Please provide both country code and phone number",
        selectCountryCodeValidationMsg: "Please select a country code",
    },
    UserCreateForm: {
        usePropertiesCheckboxesTitle: "Properties:",
        userMailInputHint: "Email username without spaces and special characters, e.g. max123",
        userMailInputLabel: "Email *",
        userNameInputHint: "Name of the person, e.g. Max Mustermann",
        userNameInputLabel: "Name *",
        userPasswordInputHint: "Password of the user",
        userPasswordInputLabel: "User password *",
        userRoleSelectHint: "Assign role to user, default is Staff.",
        userRoleSelectLabel: "Role",
    },
    useReservations: {
        cancelTableOperationMsg: "Are you sure you want to cancel the current operation?",
        cancelTableOperationTitle: "Cancel Operation",
        copyingReservationOperationMsg: "Copying reservation from table {tableLabel}",
        copyReservationConfirmMsg:
            "Copy reservation from table {sourceTableLabel} to table {targetTableLabel}?",
        copyToReservedTableErrorMsg: "Cannot copy reservation to an already reserved table!",
        copyToSameTableErrorMsg: "Cannot copy reservation to the same table!",
        crossFloorLinkErrorMsg: "Cannot link tables across different floors!",
        crossFloorTransferReservationConfirmMessage: `This will transfer reservation between floor plans "{floor1Name}" table "{table1Label}" to floor plan "{floor2Name}" table "{table2Label}"`,
        deleteReservationTitle: "Delete reservation?",
        linkingTableOperationMsg: "Linking tables to reservation: {tableLabels}",
        linkTableConfirmMsg: "Are you sure you want to link these tables: {tablesToLink}?",
        linkTableTitle: "Link Table",
        linkToReservedTableErrorMsg: "Cannot link to a table that already has a reservation",
        moveReservationToQueueConfirmTitle:
            "Are you sure you want to move this reservation to on-hold?",
        movingReservationOperationMsg: "Moving reservation from on-hold",
        reservationAlreadyReserved: "Someone else already reserved this table.",
        reservationCopyErrorMsg: "Error copying reservation! Please try again.",
        reservationUpdatedMsg: "Reservation updated!",
        tableAlreadyLinkedErrorMsg: "This table is already linked to the reservation",
        transferReservationConfirmMessage:
            "This will transfer reservation from table {table1Label} to table {table2Label}",
        transferReservationConfirmTitle: "Are you sure you want to transfer this reservation?",
        transferringReservationOperationMsg: "Transferring reservation from table {tableLabel}",
        transferToSameTableErrorMsg: "Cannot transfer reservation to the same table!",
        unlinkConfirmMessage: "Are you sure you want to unlink tables: {table}?",
        unlinkConfirmTitle: "Unlink Tables",
    },
    validation: {
        greaterThanZeroErrorMsg: "Value must be greater than 0",
        nameMustBeLongerErrorMsg: "Name must be at least 2 characters long!",
        nameRequired: "Name is required",
        negativeReservationConsumptionErrorMsg: "Consumption cannot be negative",
        passwordHasNumbers: "Password must include at least one number.",
        passwordHasSymbols:
            "Password must include at least one special character (e.g., !, #, etc...)",
        passwordHasUpperCase: "Password must include at least one uppercase letter.",
        passwordMinLength: "Password must be at least 6 characters long.",
        passwordRequired: "Password is required.",
        required: "Please type something.",
        typeRequired: "Type is required",
    },
    WalkInReservationForm: {
        optionalGuestNameLabel: "Optional Guest Name",
    },
};

export type TranslationStructure = typeof enGB;

export default enGB;
