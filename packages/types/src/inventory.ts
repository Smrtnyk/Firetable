export enum BeerSubCategory {
    ALE = "ale",
    CRAFT = "craft",
    IMPORTED = "imported",
    LAGER = "lager",
    // For region-specific beers
    LOCAL = "local",
    STOUT = "stout",
}

export enum CocktailComponentCategory {
    BITTER = "bitter",
    GARNISH = "garnish",
    ICE = "ice",
    MIXER = "mixer",
    SYRUP = "syrup",
}

export enum DrinkMainCategory {
    BEER = "beer",
    COCKTAIL_COMPONENTS = "cocktail-components",
    NON_ALCOHOLIC = "non-alcoholic",
    SPIRITS = "spirits",
    WINE = "wine",
}

export enum InventoryItemType {
    DRINK = "drink",
    // Retail products (e.g., tobacco, merchandise)
    RETAIL = "retail",
}

export enum NonAlcoholicCategory {
    COFFEE = "coffee",
    ENERGY_DRINK = "energy-drink",
    JUICE = "juice",
    MOCKTAIL = "mocktail",
    SOFT_DRINK = "soft-drink",
    TEA = "tea",
    WATER = "water",
}

export enum RetailMainCategory {
    TOBACCO = "tobacco",
}

export enum SpiritSubCategory {
    BRANDY = "brandy",
    COGNAC = "cognac",
    GIN = "gin",
    LIQUEUR = "liqueur",
    RUM = "rum",
    TEQUILA = "tequila",
    VODKA = "vodka",
    WHISKEY = "whiskey",
}

export enum TobaccoSubCategory {
    CIGARETTES = "cigarettes",
}

export enum WineSubCategory {
    FORTIFIED = "fortified",
    RED = "red",
    ROSE = "rose",
    SPARKLING = "sparkling",
    WHITE = "white",
}

export type CreateInventoryItemPayload = Omit<InventoryItemDoc, "id">;

export interface DrinkItem extends BaseInventoryItem {
    alcoholContent: number;
    mainCategory: DrinkMainCategory;
    subCategory: DrinkSubCategory;
    type: InventoryItemType.DRINK;
}

export type InventoryItemDoc = DrinkItem | RetailItem;

export interface RetailItem extends BaseInventoryItem {
    mainCategory: RetailMainCategory;
    subCategory: RetailSubCategory;
    type: InventoryItemType.RETAIL;
}

interface BaseInventoryItem {
    /**
     * Commercial brand name of the product
     * Example: "Absolut", "Heineken", "Red Bull"
     */
    brand: string;

    /**
     * Additional properties for special cases
     * Allows for flexible extension without schema changes
     * Example: { "allergens": ["sulfites"], "vintage": "2018" }
     */
    customProperties: Record<string, unknown>;

    /**
     * Detailed description of the product
     * Can include tasting notes, serving suggestions, etc.
     */
    description: string;

    /**
     * Unique identifier for the inventory item
     * Generated by the database
     */
    id: string;

    /**
     * Indicates if the item is currently available for use
     * Can be used to temporarily disable items without deletion
     */
    isActive?: boolean;

    /**
     * Date of the last inventory restock
     * ISO string format
     * Used for inventory turnover analysis
     */
    lastRestockDate?: string;

    /**
     * The full name of the product
     * Example: "Jack Daniel's Old No. 7", "Coca-Cola 330ml"
     */
    name: string;

    /**
     * Current quantity in stock
     * Represents the number of units currently available
     */
    quantity: number;

    /**
     * Geographic origin of the product
     * Used for classification and sourcing
     * Example: "Scotland", "France", "Japan"
     */
    region: null | string;

    /**
     * Specific style or variant of the product
     * Provides additional classification detail
     * Example: "Irish Whiskey", "London Dry Gin", "Cola"
     */
    style: null | string;

    /**
     * Name or identifier of the supplier
     * Used for reordering and supplier management
     */
    supplier: string;

    /**
     * The primary classification of the item
     * Used to distinguish between drinks, consumables, equipment, and retail items
     */
    type: InventoryItemType;

    /**
     * Volume of the container in milliliters
     * Example: 750 for a standard wine bottle
     */
    volume: null | number;
}

type DrinkSubCategory = {
    [DrinkMainCategory.BEER]: BeerSubCategory;
    [DrinkMainCategory.COCKTAIL_COMPONENTS]: CocktailComponentCategory;
    [DrinkMainCategory.NON_ALCOHOLIC]: NonAlcoholicCategory;
    [DrinkMainCategory.SPIRITS]: SpiritSubCategory;
    [DrinkMainCategory.WINE]: WineSubCategory;
}[DrinkMainCategory];

type RetailSubCategory = {
    [RetailMainCategory.TOBACCO]: TobaccoSubCategory;
}[RetailMainCategory];

export function isDrinkItem(item: Pick<InventoryItemDoc, "type">): item is DrinkItem {
    return item.type === InventoryItemType.DRINK;
}

export function isRetailItem(item: Pick<InventoryItemDoc, "type">): item is RetailItem {
    return item.type === InventoryItemType.RETAIL;
}
